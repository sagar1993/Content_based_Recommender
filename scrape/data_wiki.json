{"text":{"0":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","1":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","2":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","3":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","4":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","5":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","6":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","7":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","8":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","9":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","10":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","11":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","12":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","13":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","14":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","15":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","16":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","17":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","18":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","19":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","20":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","21":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","22":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","23":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","24":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","25":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","26":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","27":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","28":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","29":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","30":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","31":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","32":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","33":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","34":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","35":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","36":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","37":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","38":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","39":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","40":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","41":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","42":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","43":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","44":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","45":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","46":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","47":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","48":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","49":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","50":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","51":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","52":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","53":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","54":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","55":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","56":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","57":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","58":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","59":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","60":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","61":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","62":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","63":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","64":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","65":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","66":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","67":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","68":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","69":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","70":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","71":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","72":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","73":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","74":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","75":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","76":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","77":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","78":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","79":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","80":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","81":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","82":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","83":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","84":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","85":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","86":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","87":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","88":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","89":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","90":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","91":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","92":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","93":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","94":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","95":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","96":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","97":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","98":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","99":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","100":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","101":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","102":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","103":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","104":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","105":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","106":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","107":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","108":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","109":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","110":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","111":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","112":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","113":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","114":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","115":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","116":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","117":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","118":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","119":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","120":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","121":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","122":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","123":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","124":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","125":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","126":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","127":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","128":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","129":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","130":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","131":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","132":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","133":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","134":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","135":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","136":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","137":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","138":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","139":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","140":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","141":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","142":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","143":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","144":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","145":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","146":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","147":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","148":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","149":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","150":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","151":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","152":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","153":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","154":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","155":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","156":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","157":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","158":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","159":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","160":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","161":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","162":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","163":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","164":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","165":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","166":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","167":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","168":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","169":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","170":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","171":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","172":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","173":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","174":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","175":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","176":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","177":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","178":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","179":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","180":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","181":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","182":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","183":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","184":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","185":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","186":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","187":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","188":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","189":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","190":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","191":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","192":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","193":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","194":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","195":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","196":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","197":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","198":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","199":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","200":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","201":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","202":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","203":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","204":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","205":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","206":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","207":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","208":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","209":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","210":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","211":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","212":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","213":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","214":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","215":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","216":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","217":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","218":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","219":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","220":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","221":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","222":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","223":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","224":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","225":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","226":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","227":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","228":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","229":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","230":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","231":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","232":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","233":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","234":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","235":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","236":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","237":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","238":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","239":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","240":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","241":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","242":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","243":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","244":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","245":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","246":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","247":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","248":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","249":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","250":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","251":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","252":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","253":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","254":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","255":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","256":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","257":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","258":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","259":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","260":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","261":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","262":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","263":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","264":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","265":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","266":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","267":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","268":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","269":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","270":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","271":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","272":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","273":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","274":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","275":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","276":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","277":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","278":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","279":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","280":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","281":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","282":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","283":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","284":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","285":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","286":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","287":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","288":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","289":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","290":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","291":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","292":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","293":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","294":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","295":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","296":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","297":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","298":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","299":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","300":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","301":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","302":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","303":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","304":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","305":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","306":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","307":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","308":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","309":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","310":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","311":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","312":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","313":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","314":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","315":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","316":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","317":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","318":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","319":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","320":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","321":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","322":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","323":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","324":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","325":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","326":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","327":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","328":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","329":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","330":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","331":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","332":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","333":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","334":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","335":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","336":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","337":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","338":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","339":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","340":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","341":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","342":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","343":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","344":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","345":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","346":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","347":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","348":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","349":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","350":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","351":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","352":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","353":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","354":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","355":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","356":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","357":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","358":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","359":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","360":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","361":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","362":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","363":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","364":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","365":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","366":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","367":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","368":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","369":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","370":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","371":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","372":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","373":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","374":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","375":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","376":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","377":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","378":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","379":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","380":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","381":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","382":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","383":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","384":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","385":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","386":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","387":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","388":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","389":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","390":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","391":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","392":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","393":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","394":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","395":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","396":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","397":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","398":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","399":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","400":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","401":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","402":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","403":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","404":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","405":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","406":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","407":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","408":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","409":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","410":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","411":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","412":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","413":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","414":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","415":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","416":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","417":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","418":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","419":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","420":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","421":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","422":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","423":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","424":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","425":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","426":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","427":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","428":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","429":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","430":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","431":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","432":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","433":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","434":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","435":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","436":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","437":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","438":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","439":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","440":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","441":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","442":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","443":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","444":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","445":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","446":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","447":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","448":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","449":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","450":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","451":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","452":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","453":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","454":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","455":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","456":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","457":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","458":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","459":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","460":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","461":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","462":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","463":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","464":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","465":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","466":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","467":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","468":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","469":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","470":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","471":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","472":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","473":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","474":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","475":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","476":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","477":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","478":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","479":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","480":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","481":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","482":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","483":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","484":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","485":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","486":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","487":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","488":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","489":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","490":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","491":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","492":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","493":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","494":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","495":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","496":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","497":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","498":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","499":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","500":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","501":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","502":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","503":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","504":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","505":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","506":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","507":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","508":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","509":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","510":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","511":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","512":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","513":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","514":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","515":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","516":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","517":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","518":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","519":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","520":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","521":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","522":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","523":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","524":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","525":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","526":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","527":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","528":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","529":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","530":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","531":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","532":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","533":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","534":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","535":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","536":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","537":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","538":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","539":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","540":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","541":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","542":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","543":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","544":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","545":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","546":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","547":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","548":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","549":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","550":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","551":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","552":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","553":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","554":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","555":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","556":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","557":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","558":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","559":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","560":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","561":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","562":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","563":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","564":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","565":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","566":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","567":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","568":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","569":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","570":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","571":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","572":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","573":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","574":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","575":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","576":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","577":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","578":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","579":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","580":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","581":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","582":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","583":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","584":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","585":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","586":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","587":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","588":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","589":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","590":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","591":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","592":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","593":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","594":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","595":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","596":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","597":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","598":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","599":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","600":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","601":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","602":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","603":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","604":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","605":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","606":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","607":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","608":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","609":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","610":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","611":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","612":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","613":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","614":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","615":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","616":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","617":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","618":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","619":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","620":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","621":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","622":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","623":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","624":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","625":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","626":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","627":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","628":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","629":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","630":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","631":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","632":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","633":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","634":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","635":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","636":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","637":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","638":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","639":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","640":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","641":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","642":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","643":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","644":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","645":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","646":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","647":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","648":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","649":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","650":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","651":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","652":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","653":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","654":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","655":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","656":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","657":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","658":"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","659":"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","660":"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","661":"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, \"Create a new object dog of type Animal .\" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","662":"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a \"dog\" with 4 legs to walk with; while,  the animal2 object is a \"duck\" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","663":"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","664":"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object."},"title":{"0":"Recent changes Understanding systems","1":"Recent changes The process of abstraction","2":"Recent changes Thinking in objects","3":"Recent changes Understanding class definitions and types","4":"Recent changes Expanding your class definitions","5":"Recent changes Adding behavior to objects","6":"Recent changes The process of encapsulation","7":"How to format the content Understanding systems","8":"How to format the content The process of abstraction","9":"How to format the content Thinking in objects","10":"How to format the content Understanding class definitions and types","11":"How to format the content Expanding your class definitions","12":"How to format the content Adding behavior to objects","13":"How to format the content The process of encapsulation","14":"Who is contributing Understanding systems","15":"Who is contributing The process of abstraction","16":"Who is contributing Thinking in objects","17":"Who is contributing Understanding class definitions and types","18":"Who is contributing Expanding your class definitions","19":"Who is contributing Adding behavior to objects","20":"Who is contributing The process of encapsulation","21":"About this book Understanding systems","22":"About this book The process of abstraction","23":"About this book Thinking in objects","24":"About this book Understanding class definitions and types","25":"About this book Expanding your class definitions","26":"About this book Adding behavior to objects","27":"About this book The process of encapsulation","28":"History of Java Understanding systems","29":"History of Java The process of abstraction","30":"History of Java Thinking in objects","31":"History of Java Understanding class definitions and types","32":"History of Java Expanding your class definitions","33":"History of Java Adding behavior to objects","34":"History of Java The process of encapsulation","35":"Overview of the Java programming language Understanding systems","36":"Overview of the Java programming language The process of abstraction","37":"Overview of the Java programming language Thinking in objects","38":"Overview of the Java programming language Understanding class definitions and types","39":"Overview of the Java programming language Expanding your class definitions","40":"Overview of the Java programming language Adding behavior to objects","41":"Overview of the Java programming language The process of encapsulation","42":"The Java platform (JRE & JDK) Understanding systems","43":"The Java platform (JRE & JDK) The process of abstraction","44":"The Java platform (JRE & JDK) Thinking in objects","45":"The Java platform (JRE & JDK) Understanding class definitions and types","46":"The Java platform (JRE & JDK) Expanding your class definitions","47":"The Java platform (JRE & JDK) Adding behavior to objects","48":"The Java platform (JRE & JDK) The process of encapsulation","49":"Installing Java on Your Computer Understanding systems","50":"Installing Java on Your Computer The process of abstraction","51":"Installing Java on Your Computer Thinking in objects","52":"Installing Java on Your Computer Understanding class definitions and types","53":"Installing Java on Your Computer Expanding your class definitions","54":"Installing Java on Your Computer Adding behavior to objects","55":"Installing Java on Your Computer The process of encapsulation","56":"Compiling programs Understanding systems","57":"Compiling programs The process of abstraction","58":"Compiling programs Thinking in objects","59":"Compiling programs Understanding class definitions and types","60":"Compiling programs Expanding your class definitions","61":"Compiling programs Adding behavior to objects","62":"Compiling programs The process of encapsulation","63":"Running Java programs Understanding systems","64":"Running Java programs The process of abstraction","65":"Running Java programs Thinking in objects","66":"Running Java programs Understanding class definitions and types","67":"Running Java programs Expanding your class definitions","68":"Running Java programs Adding behavior to objects","69":"Running Java programs The process of encapsulation","70":"Understanding a Java program Understanding systems","71":"Understanding a Java program The process of abstraction","72":"Understanding a Java program Thinking in objects","73":"Understanding a Java program Understanding class definitions and types","74":"Understanding a Java program Expanding your class definitions","75":"Understanding a Java program Adding behavior to objects","76":"Understanding a Java program The process of encapsulation","77":"Java IDEs Understanding systems","78":"Java IDEs The process of abstraction","79":"Java IDEs Thinking in objects","80":"Java IDEs Understanding class definitions and types","81":"Java IDEs Expanding your class definitions","82":"Java IDEs Adding behavior to objects","83":"Java IDEs The process of encapsulation","84":"Statements Understanding systems","85":"Statements The process of abstraction","86":"Statements Thinking in objects","87":"Statements Understanding class definitions and types","88":"Statements Expanding your class definitions","89":"Statements Adding behavior to objects","90":"Statements The process of encapsulation","91":"Conditional blocks Understanding systems","92":"Conditional blocks The process of abstraction","93":"Conditional blocks Thinking in objects","94":"Conditional blocks Understanding class definitions and types","95":"Conditional blocks Expanding your class definitions","96":"Conditional blocks Adding behavior to objects","97":"Conditional blocks The process of encapsulation","98":"Loop blocks Understanding systems","99":"Loop blocks The process of abstraction","100":"Loop blocks Thinking in objects","101":"Loop blocks Understanding class definitions and types","102":"Loop blocks Expanding your class definitions","103":"Loop blocks Adding behavior to objects","104":"Loop blocks The process of encapsulation","105":"Boolean expressions Understanding systems","106":"Boolean expressions The process of abstraction","107":"Boolean expressions Thinking in objects","108":"Boolean expressions Understanding class definitions and types","109":"Boolean expressions Expanding your class definitions","110":"Boolean expressions Adding behavior to objects","111":"Boolean expressions The process of encapsulation","112":"Variables Understanding systems","113":"Variables The process of abstraction","114":"Variables Thinking in objects","115":"Variables Understanding class definitions and types","116":"Variables Expanding your class definitions","117":"Variables Adding behavior to objects","118":"Variables The process of encapsulation","119":"Primitive Types Understanding systems","120":"Primitive Types The process of abstraction","121":"Primitive Types Thinking in objects","122":"Primitive Types Understanding class definitions and types","123":"Primitive Types Expanding your class definitions","124":"Primitive Types Adding behavior to objects","125":"Primitive Types The process of encapsulation","126":"Arithmetic expressions Understanding systems","127":"Arithmetic expressions The process of abstraction","128":"Arithmetic expressions Thinking in objects","129":"Arithmetic expressions Understanding class definitions and types","130":"Arithmetic expressions Expanding your class definitions","131":"Arithmetic expressions Adding behavior to objects","132":"Arithmetic expressions The process of encapsulation","133":"Literals Understanding systems","134":"Literals The process of abstraction","135":"Literals Thinking in objects","136":"Literals Understanding class definitions and types","137":"Literals Expanding your class definitions","138":"Literals Adding behavior to objects","139":"Literals The process of encapsulation","140":"Methods Understanding systems","141":"Methods The process of abstraction","142":"Methods Thinking in objects","143":"Methods Understanding class definitions and types","144":"Methods Expanding your class definitions","145":"Methods Adding behavior to objects","146":"Methods The process of encapsulation","147":"String Understanding systems","148":"String The process of abstraction","149":"String Thinking in objects","150":"String Understanding class definitions and types","151":"String Expanding your class definitions","152":"String Adding behavior to objects","153":"String The process of encapsulation","154":"Objects Understanding systems","155":"Objects The process of abstraction","156":"Objects Thinking in objects","157":"Objects Understanding class definitions and types","158":"Objects Expanding your class definitions","159":"Objects Adding behavior to objects","160":"Objects The process of encapsulation","161":"Packages Understanding systems","162":"Packages The process of abstraction","163":"Packages Thinking in objects","164":"Packages Understanding class definitions and types","165":"Packages Expanding your class definitions","166":"Packages Adding behavior to objects","167":"Packages The process of encapsulation","168":"Arrays Understanding systems","169":"Arrays The process of abstraction","170":"Arrays Thinking in objects","171":"Arrays Understanding class definitions and types","172":"Arrays Expanding your class definitions","173":"Arrays Adding behavior to objects","174":"Arrays The process of encapsulation","175":"Mathematical functions Understanding systems","176":"Mathematical functions The process of abstraction","177":"Mathematical functions Thinking in objects","178":"Mathematical functions Understanding class definitions and types","179":"Mathematical functions Expanding your class definitions","180":"Mathematical functions Adding behavior to objects","181":"Mathematical functions The process of encapsulation","182":"Large numbers Understanding systems","183":"Large numbers The process of abstraction","184":"Large numbers Thinking in objects","185":"Large numbers Understanding class definitions and types","186":"Large numbers Expanding your class definitions","187":"Large numbers Adding behavior to objects","188":"Large numbers The process of encapsulation","189":"Random numbers Understanding systems","190":"Random numbers The process of abstraction","191":"Random numbers Thinking in objects","192":"Random numbers Understanding class definitions and types","193":"Random numbers Expanding your class definitions","194":"Random numbers Adding behavior to objects","195":"Random numbers The process of encapsulation","196":"Unicode Understanding systems","197":"Unicode The process of abstraction","198":"Unicode Thinking in objects","199":"Unicode Understanding class definitions and types","200":"Unicode Expanding your class definitions","201":"Unicode Adding behavior to objects","202":"Unicode The process of encapsulation","203":"Comments Understanding systems","204":"Comments The process of abstraction","205":"Comments Thinking in objects","206":"Comments Understanding class definitions and types","207":"Comments Expanding your class definitions","208":"Comments Adding behavior to objects","209":"Comments The process of encapsulation","210":"Keywords Understanding systems","211":"Keywords The process of abstraction","212":"Keywords Thinking in objects","213":"Keywords Understanding class definitions and types","214":"Keywords Expanding your class definitions","215":"Keywords Adding behavior to objects","216":"Keywords The process of encapsulation","217":"Coding conventions Understanding systems","218":"Coding conventions The process of abstraction","219":"Coding conventions Thinking in objects","220":"Coding conventions Understanding class definitions and types","221":"Coding conventions Expanding your class definitions","222":"Coding conventions Adding behavior to objects","223":"Coding conventions The process of encapsulation","224":"Defining classes Understanding systems","225":"Defining classes The process of abstraction","226":"Defining classes Thinking in objects","227":"Defining classes Understanding class definitions and types","228":"Defining classes Expanding your class definitions","229":"Defining classes Adding behavior to objects","230":"Defining classes The process of encapsulation","231":"Inheritance Understanding systems","232":"Inheritance The process of abstraction","233":"Inheritance Thinking in objects","234":"Inheritance Understanding class definitions and types","235":"Inheritance Expanding your class definitions","236":"Inheritance Adding behavior to objects","237":"Inheritance The process of encapsulation","238":"Interfaces Understanding systems","239":"Interfaces The process of abstraction","240":"Interfaces Thinking in objects","241":"Interfaces Understanding class definitions and types","242":"Interfaces Expanding your class definitions","243":"Interfaces Adding behavior to objects","244":"Interfaces The process of encapsulation","245":"Overloading methods and constructors Understanding systems","246":"Overloading methods and constructors The process of abstraction","247":"Overloading methods and constructors Thinking in objects","248":"Overloading methods and constructors Understanding class definitions and types","249":"Overloading methods and constructors Expanding your class definitions","250":"Overloading methods and constructors Adding behavior to objects","251":"Overloading methods and constructors The process of encapsulation","252":"Object Lifecycle Understanding systems","253":"Object Lifecycle The process of abstraction","254":"Object Lifecycle Thinking in objects","255":"Object Lifecycle Understanding class definitions and types","256":"Object Lifecycle Expanding your class definitions","257":"Object Lifecycle Adding behavior to objects","258":"Object Lifecycle The process of encapsulation","259":"Scope Understanding systems","260":"Scope The process of abstraction","261":"Scope Thinking in objects","262":"Scope Understanding class definitions and types","263":"Scope Expanding your class definitions","264":"Scope Adding behavior to objects","265":"Scope The process of encapsulation","266":"Nested classes Understanding systems","267":"Nested classes The process of abstraction","268":"Nested classes Thinking in objects","269":"Nested classes Understanding class definitions and types","270":"Nested classes Expanding your class definitions","271":"Nested classes Adding behavior to objects","272":"Nested classes The process of encapsulation","273":"Generics Understanding systems","274":"Generics The process of abstraction","275":"Generics Thinking in objects","276":"Generics Understanding class definitions and types","277":"Generics Expanding your class definitions","278":"Generics Adding behavior to objects","279":"Generics The process of encapsulation","280":"Collection Understanding systems","281":"Collection The process of abstraction","282":"Collection Thinking in objects","283":"Collection Understanding class definitions and types","284":"Collection Expanding your class definitions","285":"Collection Adding behavior to objects","286":"Collection The process of encapsulation","287":"ArrayList Understanding systems","288":"ArrayList The process of abstraction","289":"ArrayList Thinking in objects","290":"ArrayList Understanding class definitions and types","291":"ArrayList Expanding your class definitions","292":"ArrayList Adding behavior to objects","293":"ArrayList The process of encapsulation","294":"Map Understanding systems","295":"Map The process of abstraction","296":"Map Thinking in objects","297":"Map Understanding class definitions and types","298":"Map Expanding your class definitions","299":"Map Adding behavior to objects","300":"Map The process of encapsulation","301":"Comparing Objects Understanding systems","302":"Comparing Objects The process of abstraction","303":"Comparing Objects Thinking in objects","304":"Comparing Objects Understanding class definitions and types","305":"Comparing Objects Expanding your class definitions","306":"Comparing Objects Adding behavior to objects","307":"Comparing Objects The process of encapsulation","308":"Throwing and catching exceptions Understanding systems","309":"Throwing and catching exceptions The process of abstraction","310":"Throwing and catching exceptions Thinking in objects","311":"Throwing and catching exceptions Understanding class definitions and types","312":"Throwing and catching exceptions Expanding your class definitions","313":"Throwing and catching exceptions Adding behavior to objects","314":"Throwing and catching exceptions The process of encapsulation","315":"Checked exceptions Understanding systems","316":"Checked exceptions The process of abstraction","317":"Checked exceptions Thinking in objects","318":"Checked exceptions Understanding class definitions and types","319":"Checked exceptions Expanding your class definitions","320":"Checked exceptions Adding behavior to objects","321":"Checked exceptions The process of encapsulation","322":"Unchecked exceptions Understanding systems","323":"Unchecked exceptions The process of abstraction","324":"Unchecked exceptions Thinking in objects","325":"Unchecked exceptions Understanding class definitions and types","326":"Unchecked exceptions Expanding your class definitions","327":"Unchecked exceptions Adding behavior to objects","328":"Unchecked exceptions The process of encapsulation","329":"Preventing NullPointerException Understanding systems","330":"Preventing NullPointerException The process of abstraction","331":"Preventing NullPointerException Thinking in objects","332":"Preventing NullPointerException Understanding class definitions and types","333":"Preventing NullPointerException Expanding your class definitions","334":"Preventing NullPointerException Adding behavior to objects","335":"Preventing NullPointerException The process of encapsulation","336":"Stack trace Understanding systems","337":"Stack trace The process of abstraction","338":"Stack trace Thinking in objects","339":"Stack trace Understanding class definitions and types","340":"Stack trace Expanding your class definitions","341":"Stack trace Adding behavior to objects","342":"Stack trace The process of encapsulation","343":"Nesting exceptions (chained exceptions) Understanding systems","344":"Nesting exceptions (chained exceptions) The process of abstraction","345":"Nesting exceptions (chained exceptions) Thinking in objects","346":"Nesting exceptions (chained exceptions) Understanding class definitions and types","347":"Nesting exceptions (chained exceptions) Expanding your class definitions","348":"Nesting exceptions (chained exceptions) Adding behavior to objects","349":"Nesting exceptions (chained exceptions) The process of encapsulation","350":"Threads and Runnables Understanding systems","351":"Threads and Runnables The process of abstraction","352":"Threads and Runnables Thinking in objects","353":"Threads and Runnables Understanding class definitions and types","354":"Threads and Runnables Expanding your class definitions","355":"Threads and Runnables Adding behavior to objects","356":"Threads and Runnables The process of encapsulation","357":"Basic Synchronization Understanding systems","358":"Basic Synchronization The process of abstraction","359":"Basic Synchronization Thinking in objects","360":"Basic Synchronization Understanding class definitions and types","361":"Basic Synchronization Expanding your class definitions","362":"Basic Synchronization Adding behavior to objects","363":"Basic Synchronization The process of encapsulation","364":"Client Server Programming Understanding systems","365":"Client Server Programming The process of abstraction","366":"Client Server Programming Thinking in objects","367":"Client Server Programming Understanding class definitions and types","368":"Client Server Programming Expanding your class definitions","369":"Client Server Programming Adding behavior to objects","370":"Client Server Programming The process of encapsulation","371":"Remote Method Invocation (RMI) Understanding systems","372":"Remote Method Invocation (RMI) The process of abstraction","373":"Remote Method Invocation (RMI) Thinking in objects","374":"Remote Method Invocation (RMI) Understanding class definitions and types","375":"Remote Method Invocation (RMI) Expanding your class definitions","376":"Remote Method Invocation (RMI) Adding behavior to objects","377":"Remote Method Invocation (RMI) The process of encapsulation","378":"Enterprise JavaBean Programming (EJB) Understanding systems","379":"Enterprise JavaBean Programming (EJB) The process of abstraction","380":"Enterprise JavaBean Programming (EJB) Thinking in objects","381":"Enterprise JavaBean Programming (EJB) Understanding class definitions and types","382":"Enterprise JavaBean Programming (EJB) Expanding your class definitions","383":"Enterprise JavaBean Programming (EJB) Adding behavior to objects","384":"Enterprise JavaBean Programming (EJB) The process of encapsulation","385":"Java Spaces Programming (Jini) Understanding systems","386":"Java Spaces Programming (Jini) The process of abstraction","387":"Java Spaces Programming (Jini) Thinking in objects","388":"Java Spaces Programming (Jini) Understanding class definitions and types","389":"Java Spaces Programming (Jini) Expanding your class definitions","390":"Java Spaces Programming (Jini) Adding behavior to objects","391":"Java Spaces Programming (Jini) The process of encapsulation","392":"Javadoc Understanding systems","393":"Javadoc The process of abstraction","394":"Javadoc Thinking in objects","395":"Javadoc Understanding class definitions and types","396":"Javadoc Expanding your class definitions","397":"Javadoc Adding behavior to objects","398":"Javadoc The process of encapsulation","399":"Introduction to Annotation Understanding systems","400":"Introduction to Annotation The process of abstraction","401":"Introduction to Annotation Thinking in objects","402":"Introduction to Annotation Understanding class definitions and types","403":"Introduction to Annotation Expanding your class definitions","404":"Introduction to Annotation Adding behavior to objects","405":"Introduction to Annotation The process of encapsulation","406":"Creating custom annotations Understanding systems","407":"Creating custom annotations The process of abstraction","408":"Creating custom annotations Thinking in objects","409":"Creating custom annotations Understanding class definitions and types","410":"Creating custom annotations Expanding your class definitions","411":"Creating custom annotations Adding behavior to objects","412":"Creating custom annotations The process of encapsulation","413":"Meta-annotations Understanding systems","414":"Meta-annotations The process of abstraction","415":"Meta-annotations Thinking in objects","416":"Meta-annotations Understanding class definitions and types","417":"Meta-annotations Expanding your class definitions","418":"Meta-annotations Adding behavior to objects","419":"Meta-annotations The process of encapsulation","420":"Helping the compiler Understanding systems","421":"Helping the compiler The process of abstraction","422":"Helping the compiler Thinking in objects","423":"Helping the compiler Understanding class definitions and types","424":"Helping the compiler Expanding your class definitions","425":"Helping the compiler Adding behavior to objects","426":"Helping the compiler The process of encapsulation","427":"Basic I\/O Understanding systems","428":"Basic I\/O The process of abstraction","429":"Basic I\/O Thinking in objects","430":"Basic I\/O Understanding class definitions and types","431":"Basic I\/O Expanding your class definitions","432":"Basic I\/O Adding behavior to objects","433":"Basic I\/O The process of encapsulation","434":"Streams Understanding systems","435":"Streams The process of abstraction","436":"Streams Thinking in objects","437":"Streams Understanding class definitions and types","438":"Streams Expanding your class definitions","439":"Streams Adding behavior to objects","440":"Streams The process of encapsulation","441":"Event handling Understanding systems","442":"Event handling The process of abstraction","443":"Event handling Thinking in objects","444":"Event handling Understanding class definitions and types","445":"Event handling Expanding your class definitions","446":"Event handling Adding behavior to objects","447":"Event handling The process of encapsulation","448":"JavaBeans Understanding systems","449":"JavaBeans The process of abstraction","450":"JavaBeans Thinking in objects","451":"JavaBeans Understanding class definitions and types","452":"JavaBeans Expanding your class definitions","453":"JavaBeans Adding behavior to objects","454":"JavaBeans The process of encapsulation","455":"Canvas Understanding systems","456":"Canvas The process of abstraction","457":"Canvas Thinking in objects","458":"Canvas Understanding class definitions and types","459":"Canvas Expanding your class definitions","460":"Canvas Adding behavior to objects","461":"Canvas The process of encapsulation","462":"Graphics Understanding systems","463":"Graphics The process of abstraction","464":"Graphics Thinking in objects","465":"Graphics Understanding class definitions and types","466":"Graphics Expanding your class definitions","467":"Graphics Adding behavior to objects","468":"Graphics The process of encapsulation","469":"Drawing basic shapes Understanding systems","470":"Drawing basic shapes The process of abstraction","471":"Drawing basic shapes Thinking in objects","472":"Drawing basic shapes Understanding class definitions and types","473":"Drawing basic shapes Expanding your class definitions","474":"Drawing basic shapes Adding behavior to objects","475":"Drawing basic shapes The process of encapsulation","476":"Drawing complex shapes Understanding systems","477":"Drawing complex shapes The process of abstraction","478":"Drawing complex shapes Thinking in objects","479":"Drawing complex shapes Understanding class definitions and types","480":"Drawing complex shapes Expanding your class definitions","481":"Drawing complex shapes Adding behavior to objects","482":"Drawing complex shapes The process of encapsulation","483":"Drawing text Understanding systems","484":"Drawing text The process of abstraction","485":"Drawing text Thinking in objects","486":"Drawing text Understanding class definitions and types","487":"Drawing text Expanding your class definitions","488":"Drawing text Adding behavior to objects","489":"Drawing text The process of encapsulation","490":"Understanding gradients Understanding systems","491":"Understanding gradients The process of abstraction","492":"Understanding gradients Thinking in objects","493":"Understanding gradients Understanding class definitions and types","494":"Understanding gradients Expanding your class definitions","495":"Understanding gradients Adding behavior to objects","496":"Understanding gradients The process of encapsulation","497":"Applets Understanding systems","498":"Applets The process of abstraction","499":"Applets Thinking in objects","500":"Applets Understanding class definitions and types","501":"Applets Expanding your class definitions","502":"Applets Adding behavior to objects","503":"Applets The process of encapsulation","504":"Drawing basic shapes Understanding systems","505":"Drawing basic shapes The process of abstraction","506":"Drawing basic shapes Thinking in objects","507":"Drawing basic shapes Understanding class definitions and types","508":"Drawing basic shapes Expanding your class definitions","509":"Drawing basic shapes Adding behavior to objects","510":"Drawing basic shapes The process of encapsulation","511":"Drawing complex shapes Understanding systems","512":"Drawing complex shapes The process of abstraction","513":"Drawing complex shapes Thinking in objects","514":"Drawing complex shapes Understanding class definitions and types","515":"Drawing complex shapes Expanding your class definitions","516":"Drawing complex shapes Adding behavior to objects","517":"Drawing complex shapes The process of encapsulation","518":"Drawing text Understanding systems","519":"Drawing text The process of abstraction","520":"Drawing text Thinking in objects","521":"Drawing text Understanding class definitions and types","522":"Drawing text Expanding your class definitions","523":"Drawing text Adding behavior to objects","524":"Drawing text The process of encapsulation","525":"Understanding gradients Understanding systems","526":"Understanding gradients The process of abstraction","527":"Understanding gradients Thinking in objects","528":"Understanding gradients Understanding class definitions and types","529":"Understanding gradients Expanding your class definitions","530":"Understanding gradients Adding behavior to objects","531":"Understanding gradients The process of encapsulation","532":"Overview Understanding systems","533":"Overview The process of abstraction","534":"Overview Thinking in objects","535":"Overview Understanding class definitions and types","536":"Overview Expanding your class definitions","537":"Overview Adding behavior to objects","538":"Overview The process of encapsulation","539":"User Interface Understanding systems","540":"User Interface The process of abstraction","541":"User Interface Thinking in objects","542":"User Interface Understanding class definitions and types","543":"User Interface Expanding your class definitions","544":"User Interface Adding behavior to objects","545":"User Interface The process of encapsulation","546":"Event Listeners Understanding systems","547":"Event Listeners The process of abstraction","548":"Event Listeners Thinking in objects","549":"Event Listeners Understanding class definitions and types","550":"Event Listeners Expanding your class definitions","551":"Event Listeners Adding behavior to objects","552":"Event Listeners The process of encapsulation","553":"Graphics and Media Understanding systems","554":"Graphics and Media The process of abstraction","555":"Graphics and Media Thinking in objects","556":"Graphics and Media Understanding class definitions and types","557":"Graphics and Media Expanding your class definitions","558":"Graphics and Media Adding behavior to objects","559":"Graphics and Media The process of encapsulation","560":"Reflection Overview Understanding systems","561":"Reflection Overview The process of abstraction","562":"Reflection Overview Thinking in objects","563":"Reflection Overview Understanding class definitions and types","564":"Reflection Overview Expanding your class definitions","565":"Reflection Overview Adding behavior to objects","566":"Reflection Overview The process of encapsulation","567":"Dynamic Class Loading Understanding systems","568":"Dynamic Class Loading The process of abstraction","569":"Dynamic Class Loading Thinking in objects","570":"Dynamic Class Loading Understanding class definitions and types","571":"Dynamic Class Loading Expanding your class definitions","572":"Dynamic Class Loading Adding behavior to objects","573":"Dynamic Class Loading The process of encapsulation","574":"Dynamic Method Invocation Understanding systems","575":"Dynamic Method Invocation The process of abstraction","576":"Dynamic Method Invocation Thinking in objects","577":"Dynamic Method Invocation Understanding class definitions and types","578":"Dynamic Method Invocation Expanding your class definitions","579":"Dynamic Method Invocation Adding behavior to objects","580":"Dynamic Method Invocation The process of encapsulation","581":"Accessing Private Features with Reflection Understanding systems","582":"Accessing Private Features with Reflection The process of abstraction","583":"Accessing Private Features with Reflection Thinking in objects","584":"Accessing Private Features with Reflection Understanding class definitions and types","585":"Accessing Private Features with Reflection Expanding your class definitions","586":"Accessing Private Features with Reflection Adding behavior to objects","587":"Accessing Private Features with Reflection The process of encapsulation","588":"Networking Understanding systems","589":"Networking The process of abstraction","590":"Networking Thinking in objects","591":"Networking Understanding class definitions and types","592":"Networking Expanding your class definitions","593":"Networking Adding behavior to objects","594":"Networking The process of encapsulation","595":"Database programming Understanding systems","596":"Database programming The process of abstraction","597":"Database programming Thinking in objects","598":"Database programming Understanding class definitions and types","599":"Database programming Expanding your class definitions","600":"Database programming Adding behavior to objects","601":"Database programming The process of encapsulation","602":"Regular Expressions Understanding systems","603":"Regular Expressions The process of abstraction","604":"Regular Expressions Thinking in objects","605":"Regular Expressions Understanding class definitions and types","606":"Regular Expressions Expanding your class definitions","607":"Regular Expressions Adding behavior to objects","608":"Regular Expressions The process of encapsulation","609":"Libraries, extensions and frameworks Understanding systems","610":"Libraries, extensions and frameworks The process of abstraction","611":"Libraries, extensions and frameworks Thinking in objects","612":"Libraries, extensions and frameworks Understanding class definitions and types","613":"Libraries, extensions and frameworks Expanding your class definitions","614":"Libraries, extensions and frameworks Adding behavior to objects","615":"Libraries, extensions and frameworks The process of encapsulation","616":"3D programming Understanding systems","617":"3D programming The process of abstraction","618":"3D programming Thinking in objects","619":"3D programming Understanding class definitions and types","620":"3D programming Expanding your class definitions","621":"3D programming Adding behavior to objects","622":"3D programming The process of encapsulation","623":"Java Native Interface Understanding systems","624":"Java Native Interface The process of abstraction","625":"Java Native Interface Thinking in objects","626":"Java Native Interface Understanding class definitions and types","627":"Java Native Interface Expanding your class definitions","628":"Java Native Interface Adding behavior to objects","629":"Java Native Interface The process of encapsulation","630":"Invoking C Understanding systems","631":"Invoking C The process of abstraction","632":"Invoking C Thinking in objects","633":"Invoking C Understanding class definitions and types","634":"Invoking C Expanding your class definitions","635":"Invoking C Adding behavior to objects","636":"Invoking C The process of encapsulation","637":"Byte Code Understanding systems","638":"Byte Code The process of abstraction","639":"Byte Code Thinking in objects","640":"Byte Code Understanding class definitions and types","641":"Byte Code Expanding your class definitions","642":"Byte Code Adding behavior to objects","643":"Byte Code The process of encapsulation","644":"Links Understanding systems","645":"Links The process of abstraction","646":"Links Thinking in objects","647":"Links Understanding class definitions and types","648":"Links Expanding your class definitions","649":"Links Adding behavior to objects","650":"Links The process of encapsulation","651":"Glossary Understanding systems","652":"Glossary The process of abstraction","653":"Glossary Thinking in objects","654":"Glossary Understanding class definitions and types","655":"Glossary Expanding your class definitions","656":"Glossary Adding behavior to objects","657":"Glossary The process of encapsulation","658":"Index Understanding systems","659":"Index The process of abstraction","660":"Index Thinking in objects","661":"Index Understanding class definitions and types","662":"Index Expanding your class definitions","663":"Index Adding behavior to objects","664":"Index The process of encapsulation"},"url":{"0":"https:\/\/en.wikibooks.org\/\/wiki\/Special:RecentChangesLinked\/Category:Book:Java_Programming","1":"https:\/\/en.wikibooks.org\/\/wiki\/Special:RecentChangesLinked\/Category:Book:Java_Programming","2":"https:\/\/en.wikibooks.org\/\/wiki\/Special:RecentChangesLinked\/Category:Book:Java_Programming","3":"https:\/\/en.wikibooks.org\/\/wiki\/Special:RecentChangesLinked\/Category:Book:Java_Programming","4":"https:\/\/en.wikibooks.org\/\/wiki\/Special:RecentChangesLinked\/Category:Book:Java_Programming","5":"https:\/\/en.wikibooks.org\/\/wiki\/Special:RecentChangesLinked\/Category:Book:Java_Programming","6":"https:\/\/en.wikibooks.org\/\/wiki\/Special:RecentChangesLinked\/Category:Book:Java_Programming","7":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Conventions","8":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Conventions","9":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Conventions","10":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Conventions","11":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Conventions","12":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Conventions","13":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Conventions","14":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Contributors","15":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Contributors","16":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Contributors","17":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Contributors","18":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Contributors","19":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Contributors","20":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Contributors","21":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/About_This_Book","22":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/About_This_Book","23":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/About_This_Book","24":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/About_This_Book","25":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/About_This_Book","26":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/About_This_Book","27":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/About_This_Book","28":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/History","29":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/History","30":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/History","31":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/History","32":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/History","33":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/History","34":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/History","35":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Java_Overview","36":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Java_Overview","37":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Java_Overview","38":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Java_Overview","39":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Java_Overview","40":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Java_Overview","41":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Java_Overview","42":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/The_Java_Platform","43":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/The_Java_Platform","44":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/The_Java_Platform","45":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/The_Java_Platform","46":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/The_Java_Platform","47":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/The_Java_Platform","48":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/The_Java_Platform","49":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Installation","50":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Installation","51":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Installation","52":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Installation","53":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Installation","54":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Installation","55":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Installation","56":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Compilation","57":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Compilation","58":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Compilation","59":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Compilation","60":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Compilation","61":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Compilation","62":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Compilation","63":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Execution","64":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Execution","65":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Execution","66":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Execution","67":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Execution","68":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Execution","69":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Execution","70":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Understanding_a_Java_Program","71":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Understanding_a_Java_Program","72":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Understanding_a_Java_Program","73":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Understanding_a_Java_Program","74":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Understanding_a_Java_Program","75":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Understanding_a_Java_Program","76":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Understanding_a_Java_Program","77":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Java_IDEs","78":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Java_IDEs","79":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Java_IDEs","80":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Java_IDEs","81":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Java_IDEs","82":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Java_IDEs","83":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Java_IDEs","84":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Statements","85":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Statements","86":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Statements","87":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Statements","88":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Statements","89":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Statements","90":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Statements","91":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Conditional_blocks","92":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Conditional_blocks","93":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Conditional_blocks","94":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Conditional_blocks","95":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Conditional_blocks","96":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Conditional_blocks","97":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Conditional_blocks","98":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Loop_blocks","99":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Loop_blocks","100":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Loop_blocks","101":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Loop_blocks","102":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Loop_blocks","103":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Loop_blocks","104":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Loop_blocks","105":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Boolean_expressions","106":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Boolean_expressions","107":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Boolean_expressions","108":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Boolean_expressions","109":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Boolean_expressions","110":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Boolean_expressions","111":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Boolean_expressions","112":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Variables","113":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Variables","114":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Variables","115":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Variables","116":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Variables","117":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Variables","118":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Variables","119":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Primitive_Types","120":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Primitive_Types","121":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Primitive_Types","122":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Primitive_Types","123":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Primitive_Types","124":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Primitive_Types","125":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Primitive_Types","126":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Arithmetic_expressions","127":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Arithmetic_expressions","128":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Arithmetic_expressions","129":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Arithmetic_expressions","130":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Arithmetic_expressions","131":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Arithmetic_expressions","132":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Arithmetic_expressions","133":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Literals","134":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Literals","135":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Literals","136":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Literals","137":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Literals","138":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Literals","139":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Literals","140":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Methods","141":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Methods","142":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Methods","143":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Methods","144":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Methods","145":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Methods","146":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Methods","147":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/API\/java.lang.String","148":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/API\/java.lang.String","149":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/API\/java.lang.String","150":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/API\/java.lang.String","151":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/API\/java.lang.String","152":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/API\/java.lang.String","153":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/API\/java.lang.String","154":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Classes,_Objects_and_Types","155":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Classes,_Objects_and_Types","156":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Classes,_Objects_and_Types","157":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Classes,_Objects_and_Types","158":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Classes,_Objects_and_Types","159":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Classes,_Objects_and_Types","160":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Classes,_Objects_and_Types","161":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Packages","162":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Packages","163":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Packages","164":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Packages","165":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Packages","166":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Packages","167":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Packages","168":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Arrays","169":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Arrays","170":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Arrays","171":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Arrays","172":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Arrays","173":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Arrays","174":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Arrays","175":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Mathematical_functions","176":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Mathematical_functions","177":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Mathematical_functions","178":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Mathematical_functions","179":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Mathematical_functions","180":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Mathematical_functions","181":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Mathematical_functions","182":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Large_numbers","183":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Large_numbers","184":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Large_numbers","185":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Large_numbers","186":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Large_numbers","187":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Large_numbers","188":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Large_numbers","189":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Random_numbers","190":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Random_numbers","191":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Random_numbers","192":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Random_numbers","193":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Random_numbers","194":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Random_numbers","195":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Random_numbers","196":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Unicode","197":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Unicode","198":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Unicode","199":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Unicode","200":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Unicode","201":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Unicode","202":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Unicode","203":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Comments","204":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Comments","205":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Comments","206":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Comments","207":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Comments","208":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Comments","209":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Comments","210":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Keywords","211":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Keywords","212":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Keywords","213":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Keywords","214":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Keywords","215":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Keywords","216":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Keywords","217":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Coding_conventions","218":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Coding_conventions","219":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Coding_conventions","220":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Coding_conventions","221":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Coding_conventions","222":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Coding_conventions","223":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Coding_conventions","224":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Defining_Classes","225":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Defining_Classes","226":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Defining_Classes","227":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Defining_Classes","228":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Defining_Classes","229":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Defining_Classes","230":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Defining_Classes","231":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Inheritance","232":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Inheritance","233":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Inheritance","234":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Inheritance","235":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Inheritance","236":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Inheritance","237":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Inheritance","238":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Interfaces","239":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Interfaces","240":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Interfaces","241":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Interfaces","242":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Interfaces","243":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Interfaces","244":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Interfaces","245":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Overloading_Methods_and_Constructors","246":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Overloading_Methods_and_Constructors","247":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Overloading_Methods_and_Constructors","248":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Overloading_Methods_and_Constructors","249":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Overloading_Methods_and_Constructors","250":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Overloading_Methods_and_Constructors","251":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Overloading_Methods_and_Constructors","252":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Object_Lifecycle","253":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Object_Lifecycle","254":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Object_Lifecycle","255":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Object_Lifecycle","256":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Object_Lifecycle","257":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Object_Lifecycle","258":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Object_Lifecycle","259":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Scope","260":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Scope","261":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Scope","262":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Scope","263":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Scope","264":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Scope","265":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Scope","266":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Nested_Classes","267":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Nested_Classes","268":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Nested_Classes","269":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Nested_Classes","270":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Nested_Classes","271":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Nested_Classes","272":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Nested_Classes","273":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Generics","274":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Generics","275":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Generics","276":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Generics","277":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Generics","278":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Generics","279":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Generics","280":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Collection","281":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Collection","282":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Collection","283":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Collection","284":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Collection","285":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Collection","286":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Collection","287":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/ArrayList","288":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/ArrayList","289":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/ArrayList","290":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/ArrayList","291":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/ArrayList","292":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/ArrayList","293":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/ArrayList","294":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Map","295":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Map","296":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Map","297":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Map","298":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Map","299":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Map","300":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Map","301":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Comparing_Objects","302":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Comparing_Objects","303":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Comparing_Objects","304":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Comparing_Objects","305":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Comparing_Objects","306":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Comparing_Objects","307":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Comparing_Objects","308":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Throwing_and_Catching_Exceptions","309":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Throwing_and_Catching_Exceptions","310":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Throwing_and_Catching_Exceptions","311":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Throwing_and_Catching_Exceptions","312":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Throwing_and_Catching_Exceptions","313":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Throwing_and_Catching_Exceptions","314":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Throwing_and_Catching_Exceptions","315":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Checked_Exceptions","316":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Checked_Exceptions","317":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Checked_Exceptions","318":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Checked_Exceptions","319":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Checked_Exceptions","320":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Checked_Exceptions","321":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Checked_Exceptions","322":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Unchecked_Exceptions","323":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Unchecked_Exceptions","324":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Unchecked_Exceptions","325":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Unchecked_Exceptions","326":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Unchecked_Exceptions","327":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Unchecked_Exceptions","328":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Unchecked_Exceptions","329":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Preventing_NullPointerException","330":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Preventing_NullPointerException","331":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Preventing_NullPointerException","332":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Preventing_NullPointerException","333":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Preventing_NullPointerException","334":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Preventing_NullPointerException","335":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Preventing_NullPointerException","336":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Stack_trace","337":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Stack_trace","338":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Stack_trace","339":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Stack_trace","340":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Stack_trace","341":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Stack_trace","342":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Stack_trace","343":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Nesting_Exceptions","344":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Nesting_Exceptions","345":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Nesting_Exceptions","346":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Nesting_Exceptions","347":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Nesting_Exceptions","348":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Nesting_Exceptions","349":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Nesting_Exceptions","350":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Threads_and_Runnables","351":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Threads_and_Runnables","352":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Threads_and_Runnables","353":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Threads_and_Runnables","354":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Threads_and_Runnables","355":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Threads_and_Runnables","356":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Threads_and_Runnables","357":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Basic_Synchronization","358":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Basic_Synchronization","359":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Basic_Synchronization","360":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Basic_Synchronization","361":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Basic_Synchronization","362":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Basic_Synchronization","363":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Basic_Synchronization","364":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Client_Server","365":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Client_Server","366":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Client_Server","367":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Client_Server","368":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Client_Server","369":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Client_Server","370":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Client_Server","371":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Remote_Method_Invocation","372":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Remote_Method_Invocation","373":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Remote_Method_Invocation","374":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Remote_Method_Invocation","375":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Remote_Method_Invocation","376":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Remote_Method_Invocation","377":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Remote_Method_Invocation","378":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/EJB","379":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/EJB","380":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/EJB","381":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/EJB","382":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/EJB","383":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/EJB","384":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/EJB","385":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/JavaSpaces","386":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/JavaSpaces","387":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/JavaSpaces","388":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/JavaSpaces","389":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/JavaSpaces","390":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/JavaSpaces","391":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/JavaSpaces","392":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Javadoc","393":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Javadoc","394":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Javadoc","395":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Javadoc","396":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Javadoc","397":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Javadoc","398":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Javadoc","399":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Annotations\/Introduction","400":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Annotations\/Introduction","401":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Annotations\/Introduction","402":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Annotations\/Introduction","403":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Annotations\/Introduction","404":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Annotations\/Introduction","405":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Annotations\/Introduction","406":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Annotations\/Custom_Annotations","407":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Annotations\/Custom_Annotations","408":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Annotations\/Custom_Annotations","409":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Annotations\/Custom_Annotations","410":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Annotations\/Custom_Annotations","411":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Annotations\/Custom_Annotations","412":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Annotations\/Custom_Annotations","413":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Annotations\/Meta-Annotations","414":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Annotations\/Meta-Annotations","415":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Annotations\/Meta-Annotations","416":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Annotations\/Meta-Annotations","417":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Annotations\/Meta-Annotations","418":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Annotations\/Meta-Annotations","419":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Annotations\/Meta-Annotations","420":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Annotations\/Compiler_and_Annotations","421":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Annotations\/Compiler_and_Annotations","422":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Annotations\/Compiler_and_Annotations","423":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Annotations\/Compiler_and_Annotations","424":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Annotations\/Compiler_and_Annotations","425":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Annotations\/Compiler_and_Annotations","426":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Annotations\/Compiler_and_Annotations","427":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Basic_IO","428":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Basic_IO","429":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Basic_IO","430":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Basic_IO","431":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Basic_IO","432":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Basic_IO","433":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Basic_IO","434":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Streams","435":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Streams","436":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Streams","437":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Streams","438":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Streams","439":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Streams","440":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Streams","441":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Event_Handling","442":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Event_Handling","443":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Event_Handling","444":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Event_Handling","445":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Event_Handling","446":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Event_Handling","447":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Event_Handling","448":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/JavaBeans","449":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/JavaBeans","450":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/JavaBeans","451":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/JavaBeans","452":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/JavaBeans","453":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/JavaBeans","454":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/JavaBeans","455":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Canvas","456":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Canvas","457":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Canvas","458":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Canvas","459":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Canvas","460":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Canvas","461":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Canvas","462":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics","463":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics","464":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics","465":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics","466":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics","467":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics","468":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics","469":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_shapes","470":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_shapes","471":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_shapes","472":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_shapes","473":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_shapes","474":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_shapes","475":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_shapes","476":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_complex_shapes","477":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_complex_shapes","478":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_complex_shapes","479":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_complex_shapes","480":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_complex_shapes","481":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_complex_shapes","482":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_complex_shapes","483":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_text","484":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_text","485":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_text","486":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_text","487":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_text","488":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_text","489":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_text","490":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Understanding_gradients","491":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Understanding_gradients","492":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Understanding_gradients","493":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Understanding_gradients","494":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Understanding_gradients","495":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Understanding_gradients","496":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Understanding_gradients","497":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets","498":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets","499":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets","500":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets","501":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets","502":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets","503":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets","504":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_shapes","505":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_shapes","506":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_shapes","507":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_shapes","508":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_shapes","509":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_shapes","510":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_shapes","511":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_complex_shapes","512":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_complex_shapes","513":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_complex_shapes","514":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_complex_shapes","515":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_complex_shapes","516":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_complex_shapes","517":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_complex_shapes","518":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_text","519":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_text","520":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_text","521":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_text","522":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_text","523":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_text","524":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Drawing_text","525":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Understanding_gradients","526":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Understanding_gradients","527":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Understanding_gradients","528":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Understanding_gradients","529":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Understanding_gradients","530":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Understanding_gradients","531":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Graphics\/Understanding_gradients","532":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets\/Overview","533":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets\/Overview","534":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets\/Overview","535":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets\/Overview","536":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets\/Overview","537":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets\/Overview","538":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets\/Overview","539":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets\/User_Interface","540":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets\/User_Interface","541":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets\/User_Interface","542":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets\/User_Interface","543":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets\/User_Interface","544":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets\/User_Interface","545":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets\/User_Interface","546":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets\/Event_Listeners","547":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets\/Event_Listeners","548":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets\/Event_Listeners","549":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets\/Event_Listeners","550":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets\/Event_Listeners","551":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets\/Event_Listeners","552":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets\/Event_Listeners","553":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets\/Graphics_and_Media","554":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets\/Graphics_and_Media","555":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets\/Graphics_and_Media","556":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets\/Graphics_and_Media","557":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets\/Graphics_and_Media","558":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets\/Graphics_and_Media","559":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Applets\/Graphics_and_Media","560":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Reflection\/Overview","561":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Reflection\/Overview","562":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Reflection\/Overview","563":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Reflection\/Overview","564":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Reflection\/Overview","565":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Reflection\/Overview","566":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Reflection\/Overview","567":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Reflection\/Dynamic_Class_Loading","568":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Reflection\/Dynamic_Class_Loading","569":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Reflection\/Dynamic_Class_Loading","570":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Reflection\/Dynamic_Class_Loading","571":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Reflection\/Dynamic_Class_Loading","572":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Reflection\/Dynamic_Class_Loading","573":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Reflection\/Dynamic_Class_Loading","574":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Reflection\/Dynamic_Invocation","575":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Reflection\/Dynamic_Invocation","576":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Reflection\/Dynamic_Invocation","577":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Reflection\/Dynamic_Invocation","578":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Reflection\/Dynamic_Invocation","579":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Reflection\/Dynamic_Invocation","580":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Reflection\/Dynamic_Invocation","581":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Reflection\/Accessing_Private_Features_with_Reflection","582":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Reflection\/Accessing_Private_Features_with_Reflection","583":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Reflection\/Accessing_Private_Features_with_Reflection","584":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Reflection\/Accessing_Private_Features_with_Reflection","585":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Reflection\/Accessing_Private_Features_with_Reflection","586":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Reflection\/Accessing_Private_Features_with_Reflection","587":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Reflection\/Accessing_Private_Features_with_Reflection","588":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Networking","589":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Networking","590":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Networking","591":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Networking","592":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Networking","593":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Networking","594":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Networking","595":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Database_Programming","596":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Database_Programming","597":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Database_Programming","598":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Database_Programming","599":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Database_Programming","600":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Database_Programming","601":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Database_Programming","602":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Regular_Expressions","603":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Regular_Expressions","604":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Regular_Expressions","605":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Regular_Expressions","606":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Regular_Expressions","607":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Regular_Expressions","608":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Regular_Expressions","609":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Libraries,_extensions_and_frameworks","610":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Libraries,_extensions_and_frameworks","611":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Libraries,_extensions_and_frameworks","612":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Libraries,_extensions_and_frameworks","613":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Libraries,_extensions_and_frameworks","614":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Libraries,_extensions_and_frameworks","615":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Libraries,_extensions_and_frameworks","616":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/3D_Programming","617":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/3D_Programming","618":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/3D_Programming","619":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/3D_Programming","620":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/3D_Programming","621":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/3D_Programming","622":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/3D_Programming","623":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Java_Native_Interface","624":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Java_Native_Interface","625":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Java_Native_Interface","626":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Java_Native_Interface","627":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Java_Native_Interface","628":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Java_Native_Interface","629":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Java_Native_Interface","630":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Invoking_C","631":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Invoking_C","632":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Invoking_C","633":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Invoking_C","634":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Invoking_C","635":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Invoking_C","636":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Invoking_C","637":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Byte_Code","638":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Byte_Code","639":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Byte_Code","640":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Byte_Code","641":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Byte_Code","642":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Byte_Code","643":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Byte_Code","644":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Links","645":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Links","646":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Links","647":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Links","648":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Links","649":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Links","650":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Links","651":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Glossary","652":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Glossary","653":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Glossary","654":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Glossary","655":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Glossary","656":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Glossary","657":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Glossary","658":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Index","659":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Index","660":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Index","661":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Index","662":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Index","663":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Index","664":"https:\/\/en.wikibooks.org\/\/wiki\/Java_Programming\/Index"}}